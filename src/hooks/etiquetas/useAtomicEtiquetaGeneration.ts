
import { useState } from 'react';
import { 
  etiquetaAtomicService, 
  AtomicEtiquetaData, 
  DuplicateCheckResult 
} from '@/services/etiqueta/etiquetaAtomicService';
import { useAuth } from '@/hooks/useAuth';
import { toast } from '@/hooks/use-toast';

export const useAtomicEtiquetaGeneration = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [showDuplicateDialog, setShowDuplicateDialog] = useState(false);
  const [duplicateData, setDuplicateData] = useState<DuplicateCheckResult | null>(null);
  const [pendingData, setPendingData] = useState<AtomicEtiquetaData | null>(null);
  
  const { user } = useAuth();

  const verificarDuplicidade = async (notaFiscalId: string): Promise<DuplicateCheckResult> => {
    try {
      console.log('üîç Verificando duplicidade para NF:', notaFiscalId);
      return await etiquetaAtomicService.verificarDuplicidade(notaFiscalId);
    } catch (error) {
      console.error('‚ùå Erro ao verificar duplicidade:', error);
      toast({
        title: "‚ùå Erro na Verifica√ß√£o",
        description: "N√£o foi poss√≠vel verificar duplicidade da Nota Fiscal.",
        variant: "destructive"
      });
      throw error;
    }
  };

  const gerarEtiquetasAtomicamente = async (dados: AtomicEtiquetaData): Promise<Array<any> | null> => {
    if (!user?.id) {
      toast({
        title: "‚ùå Usu√°rio N√£o Autenticado",
        description: "√â necess√°rio estar logado para gerar etiquetas.",
        variant: "destructive"
      });
      throw new Error('Usu√°rio n√£o autenticado');
    }

    setIsGenerating(true);
    
    try {
      // Adicionar dados do usu√°rio
      const dadosCompletos = {
        ...dados,
        criado_por_usuario_id: user.id,
        id_empresa: user.empresa_id || dados.id_empresa
      };

      console.log('üìã Verificando duplicidade antes da grava√ß√£o...');
      
      // Verificar duplicidade primeiro
      const verificacao = await etiquetaAtomicService.verificarDuplicidade(dados.nota_fiscal_id);
      
      if (verificacao.hasDuplicates) {
        console.log('‚ö†Ô∏è Duplicidade encontrada:', verificacao);
        
        // Mostrar di√°logo de confirma√ß√£o
        setDuplicateData(verificacao);
        setPendingData(dadosCompletos);
        setShowDuplicateDialog(true);
        
        toast({
          title: "‚ö†Ô∏è Volumes Existentes Encontrados",
          description: `A Nota Fiscal j√° possui ${verificacao.existingVolumes} volume(s) gravado(s). Confirme se deseja criar novos volumes.`,
          variant: "default"
        });
        
        return null; // Aguardar confirma√ß√£o do usu√°rio
      }

      console.log('‚úÖ Nenhuma duplicidade encontrada, prosseguindo...');
      
      // Se n√£o h√° duplicatas, prosseguir diretamente
      const resultado = await etiquetaAtomicService.persistirEtiquetasAtomicamente(dadosCompletos);
      
      console.log('üíæ Etiquetas persistidas com sucesso:', resultado.length);
      
      return resultado;
      
    } catch (error) {
      console.error('‚ùå Erro na gera√ß√£o at√¥mica:', error);
      toast({
        title: "‚ùå Erro na Gera√ß√£o",
        description: error instanceof Error ? error.message : "Erro inesperado na gera√ß√£o de etiquetas",
        variant: "destructive"
      });
      throw error;
    } finally {
      setIsGenerating(false);
    }
  };

  const confirmarGeracao = async (): Promise<Array<any> | null> => {
    if (!pendingData) {
      toast({
        title: "‚ùå Dados N√£o Encontrados",
        description: "Dados para confirma√ß√£o n√£o foram encontrados.",
        variant: "destructive"
      });
      throw new Error('Dados pendentes n√£o encontrados');
    }

    setIsGenerating(true);
    setShowDuplicateDialog(false);

    try {
      console.log('‚úÖ Confirmando grava√ß√£o de novos volumes...');
      
      const resultado = await etiquetaAtomicService.persistirEtiquetasAtomicamente(pendingData);
      
      console.log('üíæ Confirma√ß√£o conclu√≠da:', resultado.length, 'etiquetas');
      
      // Limpar dados pendentes
      setPendingData(null);
      setDuplicateData(null);
      
      return resultado;
    } catch (error) {
      console.error('‚ùå Erro na confirma√ß√£o de gera√ß√£o:', error);
      toast({
        title: "‚ùå Erro na Confirma√ß√£o",
        description: error instanceof Error ? error.message : "Erro ao confirmar grava√ß√£o",
        variant: "destructive"
      });
      throw error;
    } finally {
      setIsGenerating(false);
    }
  };

  const cancelarGeracao = () => {
    console.log('‚ùå Gera√ß√£o cancelada pelo usu√°rio');
    
    setShowDuplicateDialog(false);
    setPendingData(null);
    setDuplicateData(null);
    setIsGenerating(false);
    
    toast({
      title: "‚ö†Ô∏è Opera√ß√£o Cancelada",
      description: "A grava√ß√£o de novos volumes foi cancelada.",
    });
  };

  return {
    isGenerating,
    showDuplicateDialog,
    duplicateData,
    verificarDuplicidade,
    gerarEtiquetasAtomicamente,
    confirmarGeracao,
    cancelarGeracao
  };
};
